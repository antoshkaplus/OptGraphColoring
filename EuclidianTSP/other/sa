% -----------------------------ИТЕРАЦИИ------------------------------------
% кол-во итераций
m = 100000;
% -----------------------------ПАРАМЕТРЫ-----------------------------------

% начальная температура
Tstart = 10000;
% конечная температура
Tend = 0.1;

% начальная температура для вычислений
T = Tstart;

% расстояние
S = inf;

% количество городов
n = 100;

% матрица расстояний
dist = zeros(n,n);

% генерация городов (x,y)
cities = rand(n,2)*100;

% задаем случайный маршрут
ROUTE = randperm(n);

% создаем матрицу расстояний
for i = 1:n

    for j = 1:n

        % dist ( расстояния ) has dimensions
        dist(i,j) = sqrt((cities(i,1) - cities(j,1))^2 + ...
           (cities(i,2) - cities(j,2))^2);

    end

end

% поехали оптимизировать, время от кол-ва итераций

for k = 1:m

    % сбрасываем потенциальное расстояние
    Sp = 0;

    % здесь условие создания потенциальных маршрутов, ROUTEp -
    % потенциальный маршрут

    % потенциальный маршрут
    ROUTEp = ROUTE;

    % два случайных города
    transp = randperm(n,2);

    % переворот вектора, взяли два сгенерированных числа transp и
    % перевернули маршрут между ними
    if transp(1) < transp(2)
        ROUTEp(transp(1):transp(2)) = fliplr(ROUTEp(transp(1):transp(2)));
    else
        ROUTEp(transp(2):transp(1)) = fliplr(ROUTEp(transp(2):transp(1)));
    end

    % вычисляем энергию (расстояние) потенциального маршрута
    for i = 1:n-1
        Sp = Sp + dist(ROUTEp(i),ROUTEp(i+1));
    end
        Sp = Sp + dist(ROUTEp(1),ROUTEp(end));

    % если он меньше то, потенциальный маршрут становится основным ...
    % если нет, смотрим, осуществляется ли переход

    if Sp < S
        S = Sp;
        ROUTE = ROUTEp;
    else
        % случайно выбранное число от 0 до 1
        RANDONE = rand(1);
        % вычисляем вероятность перехода
        P = exp((-(Sp - S)) / T);

            if RANDONE <= P
                S = Sp;
                ROUTE = ROUTEp;
            end

    end

    	% уменьшаем температуру
        T = Tstart / k;

        % проверяем условие выхода
        if T < Tend
            break;
        end;

end

% рисуем графику

citiesOP(:,[1,2]) = cities(ROUTE(:),[1,2]);
plot([citiesOP(:,1);citiesOP(1,1)],[citiesOP(:,2);citiesOP(1,2)],'-r.')

% очищаем переменые
clearvars -except cities ROUTE S

% смотрим время
toc